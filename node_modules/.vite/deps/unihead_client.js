import {
  __publicField
} from "./chunk-EQCVQC35.js";

// node_modules/unihead/client.mjs
var HeadElement = class {
  constructor(elem, name, document) {
    __publicField(this, "name", null);
    __publicField(this, "elem", null);
    __publicField(this, "value", null);
    __publicField(this, "attrs", null);
    this.document = document;
    this.name = name;
    this.elem = elem;
    this.value = elem == null ? void 0 : elem.textContent;
    this.attrs = this.getAttributes((elem == null ? void 0 : elem.attributes) || []);
  }
  getAttributes(domAttributes) {
    const attributes = [];
    for (let i = 0; i < domAttributes.length; i++) {
      attributes[i] = domAttributes[i];
    }
    return Object.fromEntries(attributes.map((attr) => {
      return [attr.name, attr.value];
    }));
  }
  create({ value, attrs }) {
    this.elem = this.document.createElement(this.name);
    this.update({ value, attrs });
    return this.elem;
  }
  update({ value, attrs }) {
    if (attrs) {
      for (const [attr, value2] of Object.entries(attrs)) {
        this.elem.setAttribute(attr, value2);
      }
    }
    if (value) {
      this.elem.innerText = value;
    }
  }
};
var HeadData = class {
  constructor() {
    // Head elements
    __publicField(this, "title", null);
    __publicField(this, "base", null);
    __publicField(this, "meta", null);
    __publicField(this, "link", null);
    __publicField(this, "style", null);
    __publicField(this, "script", null);
    // Attributes for <html> and <body> tags
    __publicField(this, "htmlAttrs", null);
    __publicField(this, "bodyAttrs", null);
    this.meta = [];
    this.link = [];
    this.style = [];
    this.script = [];
  }
  find(elem, { attrs, value }) {
    if (elem === "meta") {
      for (const item of this[elem]) {
        if (attrs.name && item.attrs.name === attrs.name) {
          return item;
        } else if (attrs.property && item.attrs.property === attrs.property) {
          return item;
        }
      }
    } else {
      for (const item of this[elem]) {
        if (item.value === value && Object.entries(attrs).every(([attr, attrValue]) => {
          return item.attrs[attr] === attrValue;
        })) {
          return item;
        }
      }
    }
  }
};
var _HeadManager = class _HeadManager {
  constructor(initial = {}, document) {
    // Head elements present on first load
    __publicField(this, "original", null);
    // Head elements added dynamically after first load,
    // typically bound to the current route only.
    __publicField(this, "route", null);
    this.document = document;
    this.original = new HeadData();
    this.route = new HeadData();
    for (const tag of ["title", "base", "meta", "link", "script"]) {
      if (Array.isArray(this.original[tag])) {
        this.original[tag] = [...this.document.querySelectorAll(tag)].filter((elem) => _HeadManager.canTrack(elem)).map((elem) => new HeadElement(elem, tag, this.document));
      } else {
        const elem = this.document.querySelector(tag);
        if (_HeadManager.canTrack(elem)) {
          this.original[tag] = new HeadElement(elem, tag, this.document);
        }
      }
      if (Array.isArray(this.route[tag])) {
        this.route[tag] = [];
      } else {
        this.route[tag] = new HeadElement(null, tag, this.document);
      }
    }
    if (initial) {
      this.update(initial);
    }
  }
  static canTrack(elem) {
    if (!elem) {
      return true;
    }
    const tagName = elem.tagName.toLowerCase();
    if (tagName === "script") {
      return !!elem.textContent;
    } else if (["meta", "link", "title", "base"].includes(tagName)) {
      return true;
    }
  }
  update(initial) {
    for (const [tag, tagDef] of Object.entries(initial)) {
      if (_HeadManager.single.includes(tag)) {
        if (typeof tagDef === "string") {
          this.setSingle(tag, { value: tagDef });
        } else if (typeof tagDef === "object" && tagDef !== null) {
          this.setSingle(tag, { attrs: tagDef });
        }
      } else if (_HeadManager.collective.includes(tag)) {
        if (Array.isArray(tagDef)) {
          for (const def of tagDef) {
            this.setItem(tag, def);
          }
        } else {
          this.setItem(tag, tagDef);
        }
      }
    }
  }
  getSingle(elem) {
    if (this.document.head.contains(this.route[elem])) {
      return this.route[elem].value;
    } else if (this.document.head.contains(this.original[elem].elem)) {
      return this.orignal[elem].value;
    }
  }
  // Sets a single <head> element like <title> or <base>
  setSingle(elem, { value, attrs }) {
    if (this.route[elem].elem) {
      this.route[elem].update({ value, attrs });
    } else {
      if (this.original[elem].elem) {
        this.document.head.replaceChild(this.route[elem].create({ value, attrs }), this.original[elem].elem);
      } else {
        this.document.head.appendChild(this.route[elem].create({ value, attrs }));
      }
    }
  }
  setItem(elem, attrs) {
    let routeElem = this.route.find(elem, { attrs });
    if (routeElem) {
      routeElem.update({ attrs });
    } else {
      routeElem = new HeadElement(null, elem, this.document);
      routeElem.create({ attrs });
      this.route[elem].push(routeElem);
      const originalElem = this.original.find(elem, { attrs });
      if (originalElem) {
        this.document.head.replaceChild(routeElem.elem, originalElem.elem);
      } else {
        this.document.head.appendChild(routeElem.elem);
      }
    }
  }
  reset() {
    for (const tag of _HeadManager.single) {
      if (this.document.head.contains(this.route[tag].elem)) {
        this.document.head.replaceChild(this.original[tag].elem, this.route[tag].elem);
        this.route[tag].elem = new HeadElement(null, tag, this.document);
      }
    }
    for (const tag of _HeadManager.collective) {
      for (const { elem } of this.route[tag]) {
        this.document.head.removeChild(elem);
      }
      this.route[tag] = [];
      for (const { elem } of this.original[tag]) {
        if (!this.document.head.contains(elem)) {
          this.document.head.appendChild(elem);
        }
      }
    }
  }
};
// Single-element head elements
__publicField(_HeadManager, "single", ["title", "base"]);
// Multiple-element self-closing head elements
__publicField(_HeadManager, "collective", ["link", "meta", "script"]);
var HeadManager = _HeadManager;
var Head = class {
  constructor(initial, document) {
    return new Proxy(new HeadManager(initial, document), {
      get(head, elem) {
        if (elem === "update") {
          return (initialHead) => head.update(initialHead);
        }
        if (elem === "reset") {
          return () => head.reset();
        }
        if (HeadManager.single.includes(elem)) {
          return head.getSingle(elem);
        } else if (HeadManager.collective.includes(elem)) {
          const list = [
            ...head.original[elem],
            ...head.route[elem]
          ].filter(({ elem: elem2 }) => {
            return document.head.contains(elem2);
          });
          return new Proxy(list, {
            get(_, prop) {
              if (typeof prop === "number") {
                return list[prop];
              } else if (prop === "set") {
                return (item) => {
                  head.setItem(elem, item);
                };
              } else if (prop === "push") {
                return (items) => {
                  for (const item of items) {
                    head.setItem(elem, item);
                  }
                };
              }
            }
          });
        }
      },
      set(head, elem, value) {
        if (HeadManager.single.includes(elem)) {
          if (typeof value === "string") {
            head.setSingle(elem, { value });
          } else if (typeof value === "object" && value !== null) {
            head.setSingle(elem, { attrs: value });
          }
          return value;
        } else if (HeadManager.collective.includes(elem)) {
          if (!Array.isArray(value)) {
            throw new Error(`Values must be in an array for setting ${elem} elements`);
          }
          for (const item of value) {
            head.setItem(elem, item);
          }
        }
      }
    });
  }
};
var client_default = Head;
export {
  client_default as default
};
//# sourceMappingURL=unihead_client.js.map
